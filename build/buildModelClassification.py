# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ux3b8MTwz7DTTzVNiqnLG1SWndZLkaSo
"""

# Commented out IPython magic to ensure Python compatibility.
# from google.colab import drive
# drive.mount('/content/drive/')
# %cd /content/drive/MyDrive/DataMining

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import BaggingClassifier, RandomForestClassifier,AdaBoostClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix, accuracy_score,precision_score, recall_score,f1_score
from sklearn.metrics import precision_recall_fscore_support

df = pd.read_csv("divorce.csv",delimiter=';')

# print(df.info)
# print(df.describe())


X = df.drop('Class', axis=1).values
y = df['Class'].values
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=0)

print("Kiểm tra số lượng phần tử null \n" , df.isnull().sum())

print("So luong phan tu: ", len(X))

print("Kiểm tra tập dử liệu có mất cân bằng ", df["Class"].value_counts())

# Mô hình K-Nearest Neighbors:
model_knn = KNeighborsClassifier(n_neighbors=5)
model_knn.fit(X_train, y_train)
y_pred_knn = model_knn.predict(X_test)
acc_knn = accuracy_score(y_test, y_pred_knn)
cm_knn = confusion_matrix(y_test, y_pred_knn)
precision_knn, recall_knn, f1_knn, _ = precision_recall_fscore_support(y_test, y_pred_knn)
print("Accuracy K-NN: {:.2f}%".format(acc_knn * 100))
print("Confusion Matrix K-NN:\n", cm_knn)
print("Precision K-NN: {:.2f}%".format(precision_knn[0] * 100))
print("Recall K-NN: {:.2f}%".format(recall_knn[0] * 100))
print("F1 K-NN: {:.2f}%".format(f1_knn[0] * 100))

# Mô hình Decision Tree:
model_dt = DecisionTreeClassifier(random_state=0)
model_dt.fit(X_train, y_train)
y_pred_dt = model_dt.predict(X_test)
acc_dt = accuracy_score(y_test, y_pred_dt)
cm_dt = confusion_matrix(y_test, y_pred_dt)
precision_dt, recall_dt, f1_dt, _ = precision_recall_fscore_support(y_test, y_pred_dt)
print("Accuracy Decision Tree: {:.2f}%".format(acc_dt * 100))
print("Confusion Matrix Decision Tree:\n", cm_dt)
print("Precision Decision Tree: {:.2f}%".format(precision_dt[0] * 100))
print("Recall Decision Tree: {:.2f}%".format(recall_dt[0] * 100))
print("F1 Decision Tree: {:.2f}%".format(f1_dt[0] * 100))

#Mô hình Naive Bayes:
model_nb = GaussianNB()
model_nb.fit(X_train, y_train)
y_pred_nb = model_nb.predict(X_test)
acc_nb = accuracy_score(y_test, y_pred_nb)
cm_nb = confusion_matrix(y_test, y_pred_nb)
precision_nb, recall_nb, f1_nb, _ = precision_recall_fscore_support(y_test, y_pred_nb)
print("Accuracy Naive Bayes: {:.2f}%".format(acc_nb * 100))
print("Confusion Matrix Naive Bayes:\n", cm_nb)
print("Precision Naive Bayes: {:.2f}%".format(precision_nb[0] * 100))
print("Recall Naive Bayes: {:.2f}%".format(recall_nb[0] * 100))
print("F1 Naive Bayes: {:.2f}%".format(f1_nb[0] * 100))

# Mô hình SVM:
model_svm = SVC(kernel='rbf')
model_svm.fit(X_train, y_train)
y_pred_svm = model_svm.predict(X_test)
acc_svm = accuracy_score(y_test, y_pred_svm)
cm_svm = confusion_matrix(y_test, y_pred_svm)
precision_svm, recall_svm, f1_svm, _ = precision_recall_fscore_support(y_test, y_pred_svm)
print("Accuracy SVM: {:.2f}%".format(acc_svm * 100))
print("Confusion Matrix SVM:\n", cm_svm)
print("Precision SVM: {:.2f}%".format(precision_svm[0] * 100))
print("Recall SVM: {:.2f}%".format(recall_svm[0] * 100))
print("F1 SVM: {:.2f}%".format(f1_svm[0] * 100))

# Mô hình Random Forest:
model_rf = RandomForestClassifier(n_estimators=100, criterion='entropy', random_state=0)
model_rf.fit(X_train, y_train)
y_pred_rf = model_rf.predict(X_test)
acc_rf = accuracy_score(y_test, y_pred_rf)
cm_rf = confusion_matrix(y_test, y_pred_rf)
precision_rf, recall_rf, f1_rf, _ = precision_recall_fscore_support(y_test, y_pred_rf)
print("Accuracy Random Forest: {:.2f}%".format(acc_rf * 100))
print("Confusion Matrix Random Forest:\n", cm_rf)
print("Precision Random Forest: {:.2f}%".format(precision_rf[0] * 100))
print("Recall Random Forest: {:.2f}%".format(recall_rf[0] * 100))
print("F1 Random Forest: {:.2f}%".format(f1_rf[0] * 100))

# Mô hình AdaBoost:
model_adaboost = AdaBoostClassifier(n_estimators=100, random_state=0)
model_adaboost.fit(X_train, y_train)
y_pred_adaboost = model_adaboost.predict(X_test)
acc_adaboost = accuracy_score(y_test, y_pred_adaboost)
cm_adaboost = confusion_matrix(y_test, y_pred_adaboost)
precision_adaboost, recall_adaboost, f1_adaboost, _ = precision_recall_fscore_support(y_test, y_pred_adaboost)
print("Accuracy AdaBoost: {:.2f}%".format(acc_adaboost * 100))
print("Confusion Matrix AdaBoost:\n", cm_adaboost)
print("Precision AdaBoost: {:.2f}%".format(precision_adaboost[0] * 100))
print("Recall AdaBoost: {:.2f}%".format(recall_adaboost[0] * 100))
print("F1 AdaBoost: {:.2f}%".format(f1_adaboost[0] * 100))